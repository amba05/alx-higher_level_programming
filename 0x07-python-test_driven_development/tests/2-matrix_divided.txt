==============================
How to Use 2-matrix_divided.py
==============================

The function is run with ``matrix_divided()``

Array 
=======

``matrix_divided()`` returns a new Matrix. All elements of the matrix should be divided by div and rounded to 2 decimal places

::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

        >>> matrix_divided([[1, 2, 3],[4, 5, 6]], 3)
        [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


It can also work if the matrix contains float elements
::
        >>> matrix_divided([[1, 2.5],[4.2, 5]], 2)
        [[0.5, 1.25], [2.1, 2.5]]


It raises a typerror if each row of the matrix are not the same size
:: 
        >>> matrix_divided([[3, 2.5], [2, 5, 8]], 2)
        Traceback (most recent call last):
        TypeError: Each row of the matrix must have the same size


It raises a ``TypeError`` if element in matrix are neither integers or float
::
        >>> matrix_divided([["3", 4, 2.5], [2, 5, 8]], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists)of integers/floats



It raises a ``TypeError`` if div is not a number(int or float)
::
        >>> matrix_divided([[3, 8, 2.5], [2, 5, 8]], "4")
        Traceback (most recent call last):
        TypeError: div must be a number



It raises a ``ZeroDivisionError`` if div is equals to 0
::
        >>> matrix_divided([[3, 2.5], [2, 8]], 0)
        Traceback (most recent call last):
        ZeroDivisionError: division by zero
