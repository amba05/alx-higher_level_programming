==============================
How to Use 4-print_square.py
==============================

The function is run with ``print_square(number)``

Strings
========

``print_square(number)`` prints a square with the character #. 

::
	>>> print_square = __import__('4-print_square').print_square

        >>> print_square(4)
        ####
	####
	####
	####


It can also work with large integers
::
        >>> print_square(10)
        ##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########
	##########


It prints a blank line when alloted the value 0
:: 
        >>> print_square(0)
	<BLANKLINE>


It prints only 1 square when alloted the value 1
::
        >>> print_square(1)
	#


It raises a ``TypeError`` exception when size alloted is not an integer
::
	>>> print_square("5")
	Traceback (most recent call last):
        ...
        TypeError: size must be an integer


It raises a ``ValueError`` exception when size is less than 0
::
        >>> print_square(-2)
        Traceback (most recent call last):
        ...
        ValueError: size must be >= 0


It raises a ``TypeError`` exception when size is a float and is less than 0
::
        >>> print_square(-0.4)
        Traceback (most recent call last):
        ...
        TypeError: size must be an integer


